CREATE TABLE PUBLIC_USER_INFO AS (SELECT * FROM KEYKHOLT.PUBLIC_USER_INFORMATION);
INSERT INTO USERS (USER_ID, FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER)
SELECT DISTINCT CAST(USER_ID AS NUMBER), FIRST_NAME, LAST_NAME, YEAR_OF_BIRTH, MONTH_OF_BIRTH, DAY_OF_BIRTH, GENDER
FROM PUBLIC_USER_INFO;


--INSERTS USER CITIES INTO CITIES TABLE
INSERT INTO CITIES(CITY_NAME, STATE_NAME, COUNTRY_NAME)
SELECT DISTINCT CURRENT_CITY, CURRENT_STATE, CURRENT_COUNTRY
FROM PUBLIC_USER_INFO
WHERE CURRENT_CITY IS NOT NULL AND CURRENT_STATE IS NOT NULL AND CURRENT_COUNTRY IS NOT NULL;

--INSERTS HOMETOWN & CURRENT TOWN
INSERT INTO USER_HOMETOWN_CITY(USER_ID, HOMETOWN_CITY_ID)
SELECT DISTINCT PUBLIC_USER_INFO.USER_ID, CITIES.CITY_ID
FROM PUBLIC_USER_INFO
INNER JOIN CITIES 
	ON CITIES.CITY_NAME = PUBLIC_USER_INFO.HOMETOWN_CITY 
	AND CITIES.STATE_NAME = PUBLIC_USER_INFO.HOMETOWN_STATE
	AND CITIES.COUNTRY_NAME = PUBLIC_USER_INFO.HOMETOWN_COUNTRY;

INSERT INTO USER_CURRENT_CITY(USER_ID, CURRENT_CITY_ID)
SELECT DISTINCT PUBLIC_USER_INFO.USER_ID, CITIES.CITY_ID
FROM PUBLIC_USER_INFO
INNER JOIN CITIES 
	ON CITIES.CITY_NAME = PUBLIC_USER_INFO.CURRENT_CITY 
	AND CITIES.STATE_NAME = PUBLIC_USER_INFO.CURRENT_STATE
	AND CITIES.COUNTRY_NAME = PUBLIC_USER_INFO.CURRENT_COUNTRY;

-- insert distinct prog infos
INSERT INTO PROGRAMS(INSTITUTION, CONCENTRATION, DEGREE)
SELECT DISTINCT INSTITUTION_NAME, PROGRAM_CONCENTRATION, PROGRAM_DEGREE
FROM PUBLIC_USER_INFO
WHERE
	INSTITUTION_NAME IS NOT NULL
	AND PROGRAM_CONCENTRATION IS NOT NULL
	AND PROGRAM_DEGREE IS NOT NULL
;

--MATCHES DEGREES TO PROGRAM ID AND USER ID AND ADDS TO EDUCATION
INSERT INTO EDUCATION(USER_ID, PROGRAM_ID, PROGRAM_YEAR)
SELECT PUBLIC_USER_INFO.USER_ID, PROGRAMS.PROGRAM_ID, PUBLIC_USER_INFO.PROGRAM_YEAR
FROM PUBLIC_USER_INFO
INNER JOIN PROGRAMS
	ON PROGRAMS.CONCENTRATION = PUBLIC_USER_INFO.PROGRAM_CONCENTRATION 
	AND PROGRAMS.INSTITUTION = PUBLIC_USER_INFO.INSTITUTION_NAME
	AND PROGRAMS.DEGREE = PUBLIC_USER_INFO.PROGRAM_DEGREE;



--ADDS EVENT INFO + CITY ID TO EVENTS TABLE
CREATE TABLE PUBLIC_EVENT_INFO AS (SELECT * FROM KEYKHOLT.PUBLIC_EVENT_INFORMATION);
INSERT INTO USER_EVENTS(EVENT_ID, EVENT_CREATOR_ID, EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_LOCATION, EVENT_START_TIME, EVENT_END_TIME, EVENT_CITY_ID)
SELECT DISTINCT CAST(EVENT_ID AS NUMBER), CAST(EVENT_CREATOR_ID AS NUMBER), EVENT_NAME, EVENT_TAGLINE, EVENT_DESCRIPTION, EVENT_HOST, EVENT_TYPE, EVENT_SUBTYPE, EVENT_LOCATION, EVENT_START_TIME, EVENT_END_TIME, CITIES.CITY_ID
FROM PUBLIC_EVENT_INFO
INNER JOIN CITIES 
	ON CITIES.CITY_NAME = PUBLIC_EVENT_INFO.EVENT_CITY 
	AND CITIES.STATE_NAME = PUBLIC_EVENT_INFO.EVENT_STATE
	AND CITIES.COUNTRY_NAME = PUBLIC_EVENT_INFO.EVENT_COUNTRY
WHERE
	PUBLIC_EVENT_INFO.EVENT_CITY IS NOT NULL
	AND PUBLIC_EVENT_INFO.EVENT_STATE IS NOT NULL
	AND PUBLIC_EVENT_INFO.EVENT_COUNTRY IS NOT NULL
;

/*
PHOTO INFO
1. ADD ALBUM IDS + COVER PHOTO + OWNER ID + ELSE TO ALBUM TABLE
2. ADD PHOTO INFO + PARENT ALBUM TO PHOTO TABLE
*/
CREATE TABLE PUBLIC_PHOTO_INFO AS (SELECT * FROM KEYKHOLT.PUBLIC_PHOTO_INFORMATION);

INSERT INTO ALBUMS(ALBUM_ID, ALBUM_OWNER_ID, COVER_PHOTO_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY)
SELECT DISTINCT ALBUM_ID, OWNER_ID, COVER_PHOTO_ID, ALBUM_NAME, ALBUM_CREATED_TIME, ALBUM_MODIFIED_TIME, ALBUM_LINK, ALBUM_VISIBILITY
FROM PUBLIC_PHOTO_INFO;

INSERT INTO PHOTOS(PHOTO_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK, ALBUM_ID)
SELECT DISTINCT PHOTO_ID, PHOTO_CAPTION, PHOTO_CREATED_TIME, PHOTO_MODIFIED_TIME, PHOTO_LINK, ALBUM_ID 
FROM PUBLIC_PHOTO_INFO;

/*
FRIEND INFO
1. 
*/
CREATE TABLE PUBLIC_FRIENDS AS (SELECT * FROM KEYKHOLT.PUBLIC_ARE_FRIENDS);
INSERT INTO FRIENDS(USER1_ID, USER2_ID)
SELECT USER1_ID, USER2_ID 
FROM PUBLIC_FRIENDS;

/*
TAG INFO
1. insert distinct photo ids into tag
*/
CREATE TABLE PUBLIC_TAG_INFO AS (SELECT * FROM KEYKHOLT.PUBLIC_TAG_INFORMATION);
INSERT INTO TAGS(TAG_PHOTO_ID, TAG_SUBJECT_ID, TAG_CREATED_TIME, TAG_X, TAG_Y)
SELECT DISTINCT PHOTO_ID, CAST(TAG_SUBJECT_ID AS NUMBER), TAG_CREATED_TIME, TAG_X_COORDINATE, TAG_Y_COORDINATE
FROM PUBLIC_TAG_INFO;

DROP TABLE PUBLIC_USER_INFO;
DROP TABLE PUBLIC_EVENT_INFO;
DROP TABLE PUBLIC_PHOTO_INFO;
DROP TABLE PUBLIC_FRIENDS;
DROP TABLE PUBLIC_TAG_INFO;


